schema
  @link(url: \"https://specs.apollo.dev/link/v1.0\")
  @link(url: \"https://specs.apollo.dev/join/v0.3\", for: EXECUTION)
  @link(url: \"https://specs.apollo.dev/tag/v0.3\", import: [\"@tag\"])
  @link(url: \"https://specs.apollo.dev/inaccessible/v0.2\", import: [\"@inaccessible\"], for: SECURITY)
{
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

scalar join__FieldSet

enum join__Graph {
  PANDAS @join__graph(name: \"pandas\", url: \"http://localhost:4003\")
  PRODUCTS @join__graph(name: \"products\", url: \"http://localhost:4002\")
  USERS @join__graph(name: \"users\", url: \"http://localhost:4001\")
}

scalar link__Import 

enum link__Purpose {
  \"\"\"
  `SECURITY` features provide metadata necessary to securely resolve fields.
  \"\"\"
  SECURITY

  \"\"\"
  `EXECUTION` features provide metadata necessary for operation execution.
  \"\"\"
  EXECUTION
}

type Panda
 @join__type(graph: PANDAS)
{
  name: ID!
  favoriteFood: String @tag(name: \"nom-nom-nom\")
}

type Product implements ProductItf & SkuItf
  @join__implements(graph: PRODUCTS, interface: \"ProductItf\")
  @join__implements(graph: PRODUCTS, interface: \"SkuItf\")
  @join__type(graph: PRODUCTS, key: \"id\")
  @join__type(graph: PRODUCTS, key: \"sku package\")
 @join__type(graph: PRODUCTS, key: \"sku variation { id }\")
{
  id: ID! @tag(name: \"hi-from-products\")
  sku: String
  package: String
  variation: ProductVariation
  dimensions: ProductDimension
  createdBy: User
  hidden: String
}

type ProductDimension
  @join__type(graph: PRODUCTS)
{
  size: String
  weight: Float
}

interface ProductItf implements SkuItf
  @join__implements(graph: PRODUCTS, interface: \"SkuItf\")
  @join__type(graph: PRODUCTS)
{
  id: ID!
  sku: String
  package: String
  variation: ProductVariation
  dimensions: ProductDimension
  createdBy: User
  hidden: String @inaccessible
}

type ProductVariation
  @join__type(graph: PRODUCTS)
{
  id: ID!
}

type Query
  @join__type(graph: PANDAS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: USERS)
{
  allPandas: [Panda] @join__field(graph: PANDAS)
  panda(name: ID!): Panda @join__field(graph: PANDAS)
  allProducts: [ProductItf] @join__field(graph: PRODUCTS)
  product(id: ID!): ProductItf @join__field(graph: PRODUCTS)
}

enum ShippingClass
  @join__type(graph: PRODUCTS)
{
  STANDARD @join__enumValue(graph: PRODUCTS)
  EXPRESS @join__enumValue(graph: PRODUCTS)
}

interface SkuItf
  @join__type(graph: PRODUCTS)
{
  sku: String
}

type User
  @join__type(graph: PRODUCTS, key: \"email\")
  @join__type(graph: USERS, key: \"email\")
{
  email: ID! @tag(name: \"test-from-users\")
  totalProductsCreated: Int
  name: String @join__field(graph: USERS)
}
