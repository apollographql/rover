use crate::RoverResult;
use camino::Utf8PathBuf;
use rover_std::Style;

#[derive(Debug)]
pub struct MCPSetupResult {
    pub claude_config: Option<Utf8PathBuf>,
}

pub struct MCPOperations;

impl MCPOperations {
    pub fn setup_mcp_project_with_name(
        project_path: &Utf8PathBuf,
        api_key: &str,
        graph_ref: &str,
        project_name: Option<&str>,
    ) -> RoverResult<MCPSetupResult> {
        println!("{}", Style::Heading.paint("Setting up MCP server..."));

        // Check Node version and optionally generate Claude Desktop config
        let (claude_config, _connector_name) = Self::setup_claude_desktop_config_with_name(
            project_path,
            api_key,
            graph_ref,
            project_name,
        )?;

        Ok(MCPSetupResult {
            claude_config,
        })
    }



    fn setup_claude_desktop_config_with_name(
        project_path: &Utf8PathBuf,
        _api_key: &str,
        _graph_ref: &str,
        project_name: Option<&str>,
    ) -> RoverResult<(Option<Utf8PathBuf>, Option<String>)> {
        // Check Node version
        if !Self::check_node_version()? {
            println!(
                "{} Node.js 18+ required for Claude Desktop integration. Skipping claude_desktop_config.json generation.",
                Style::WarningHeading.paint("âš ")
            );
            return Ok((None, None));
        }

        // Use project name if provided, otherwise fall back to the directory name
        let connector_base_name = if let Some(name) = project_name {
            name.to_lowercase().replace(' ', "-")
        } else {
            project_path
                .file_name()
                .unwrap_or("mcp-project")
                .to_lowercase()
                .replace(' ', "-")
        };
        let connector_name = format!("mcp-{}", connector_base_name);

        // The claude_desktop_config.json file will be generated by the template system
        // with proper {{project-name}} variable substitution
        let claude_config_path = project_path.join("claude_desktop_config.json");

        println!(
            "{}",
            Style::Success.paint(format!("âœ“ Claude Desktop config will be generated with MCP server '{}'", &connector_name))
        );

        Ok((Some(claude_config_path), Some(connector_name)))
    }

    fn check_node_version() -> RoverResult<bool> {
        let output = std::process::Command::new("node").arg("--version").output();

        match output {
            Ok(output) => {
                if output.status.success() {
                    let version_str = String::from_utf8_lossy(&output.stdout);
                    let version = version_str.trim().strip_prefix('v').unwrap_or(&version_str);

                    // Parse major version
                    if let Some(major_str) = version.split('.').next()
                        && let Ok(major) = major_str.parse::<u32>()
                    {
                        return Ok(major >= 18);
                    }
                }
            }
            Err(_) => {
                println!("{} Node.js not found", Style::WarningHeading.paint("âš "));
                return Ok(false);
            }
        }

        Ok(false)
    }

    pub fn display_mcp_success_message(
        project_name: String,
        setup_result: &MCPSetupResult,
        graph_ref: &str,
        _project_path: &Utf8PathBuf,
        api_key: &str,
    ) {
        println!("{}", Style::Success.paint("âœ“ MCP server enhanced"));
        println!("{}", Style::Success.paint("âœ“ Credentials saved to .env file"));

        // Project Details section
        println!();
        println!("{}", Style::File.paint("Project details"));
        println!("   â€¢ MCP Server Name: mcp-{}", project_name);
        println!("   â€¢ {}: {}",
            Style::GraphRef.paint("APOLLO_GRAPH_REF"),
            graph_ref
        );
        println!("   â€¢ {}: {}",
            Style::Command.paint("APOLLO_KEY"),
            api_key
        );


        // Next Steps section
        println!();
        println!("{}", Style::File.paint("Next steps â†´"));

        println!();
        println!("1. See the magic - get your MCP server running:");
        println!("   â€¢ {}", Style::Command.paint("npm start"));
        println!("   â€¢ MCP server will start on http://localhost:5000");
        println!("   â€¢ In a new terminal: {}", Style::Command.paint("export $(cat .env | xargs) && APOLLO_ROVER_DEV_ROUTER_VERSION=2.6.0 rover dev --supergraph-config connectors/supergraph.yaml"));
        println!("   â€¢ Your API + MCP server will start on http://localhost:4000 and http://localhost:5000");

        println!();
        println!("2. Connect Claude Desktop to see your API as AI tools:");
        println!("   â€¢ Ensure Node.js 18+ is installed");
        if setup_result.claude_config.is_some() {
            println!("   â€¢ Copy the generated claude_desktop_config.json to:");
            println!("     macOS:   {}", Style::Path.paint("~/Library/Application Support/Claude/claude_desktop_config.json"));
            println!("     Windows: {}", Style::Path.paint("%APPDATA%\\Claude\\claude_desktop_config.json"));
            println!("     Linux:   {}", Style::Path.paint("~/.config/Claude/claude_desktop_config.json"));
            println!("   â€¢ Start Claude Desktop");
            println!("   â€¢ Ask Claude: \"What data can you query for me?\"");
        } else {
            println!("   â€¢ Set up Claude Desktop configuration manually");
            println!("   â€¢ See: https://www.apollographql.com/docs/apollo-mcp-server/quickstart#step-4-connect-claude-desktop");
        }

        println!();
        println!("ðŸ’¡ Your GraphQL APIs are now AI-accessible through natural language!");
    }
}
