use camino::Utf8PathBuf;
use rover_std::Style;

use crate::RoverResult;

#[derive(Debug)]
pub struct MCPSetupResult {
    pub claude_config: Option<Utf8PathBuf>,
}

pub struct MCPOperations;

impl MCPOperations {
    pub fn setup_mcp_project_with_name(
        project_path: &Utf8PathBuf,
        api_key: &str,
        graph_ref: &str,
        project_name: Option<&str>,
    ) -> RoverResult<MCPSetupResult> {
        // Check Node version and optionally generate Claude Desktop config
        let (claude_config, _connector_name) = Self::setup_claude_desktop_config_with_name(
            project_path,
            api_key,
            graph_ref,
            project_name,
        )?;

        Ok(MCPSetupResult { claude_config })
    }

    fn setup_claude_desktop_config_with_name(
        project_path: &Utf8PathBuf,
        _api_key: &str,
        _graph_ref: &str,
        project_name: Option<&str>,
    ) -> RoverResult<(Option<Utf8PathBuf>, Option<String>)> {
        // Check Node version
        if !Self::check_node_version()? {
            println!(
                "{} Node.js 18+ required for Claude Desktop integration. Skipping claude_desktop_config.json generation.",
                Style::WarningHeading.paint("⚠")
            );
            return Ok((None, None));
        }

        // Use project name if provided, otherwise fall back to the directory name
        let connector_base_name = if let Some(name) = project_name {
            name.to_lowercase().replace(' ', "-")
        } else {
            project_path
                .file_name()
                .unwrap_or("mcp-project")
                .to_lowercase()
                .replace(' ', "-")
        };
        let connector_name = format!("mcp-{}", connector_base_name);

        // The claude_desktop_config.json file will be generated by the template system
        // with proper {{project-name}} variable substitution
        let claude_config_path = project_path.join("claude_desktop_config.json");

        println!(
            "{}",
            Style::Success.paint(format!(
                "✓ Claude Desktop config will be generated with MCP server '{}'",
                &connector_name
            ))
        );

        Ok((Some(claude_config_path), Some(connector_name)))
    }

    fn check_node_version() -> RoverResult<bool> {
        let output = std::process::Command::new("node").arg("--version").output();

        match output {
            Ok(output) => {
                if output.status.success() {
                    let version_str = String::from_utf8_lossy(&output.stdout);
                    let version = version_str.trim().strip_prefix('v').unwrap_or(&version_str);

                    // Parse major version
                    if let Some(major_str) = version.split('.').next()
                        && let Ok(major) = major_str.parse::<u32>()
                    {
                        return Ok(major >= 18);
                    }
                }
            }
            Err(_) => {
                println!("{} Node.js not found", Style::WarningHeading.paint("⚠"));
                return Ok(false);
            }
        }

        Ok(false)
    }
}
