use crate::RoverResult;
use camino::Utf8PathBuf;
use rover_client::shared::GraphRef;
use rover_std::Style;
use std::str::FromStr;

#[derive(Debug)]
pub struct MCPSetupResult {
    pub binary_path: Utf8PathBuf,
    pub claude_config: Option<Utf8PathBuf>,
    pub connector_name: Option<String>,
}

pub struct MCPOperations;

impl MCPOperations {
    pub fn setup_mcp_project_with_name(
        project_path: &Utf8PathBuf,
        api_key: &str,
        graph_ref: &str,
        project_name: Option<&str>,
    ) -> RoverResult<MCPSetupResult> {
        println!("{}", Style::Heading.paint("Setting up MCP server..."));

        // Check Node version and optionally generate Claude Desktop config
        let (claude_config, connector_name) = Self::setup_claude_desktop_config_with_name(
            project_path,
            api_key,
            graph_ref,
            project_name,
        )?;

        Ok(MCPSetupResult {
            binary_path: Utf8PathBuf::from(""), // No longer downloading binary
            claude_config,
            connector_name,
        })
    }



    fn setup_claude_desktop_config_with_name(
        project_path: &Utf8PathBuf,
        _api_key: &str,
        _graph_ref: &str,
        project_name: Option<&str>,
    ) -> RoverResult<(Option<Utf8PathBuf>, Option<String>)> {
        // Check Node version
        if !Self::check_node_version()? {
            println!(
                "{} Node.js 18+ required for Claude Desktop integration. Skipping claude_desktop_config.json generation.",
                Style::WarningHeading.paint("âš ")
            );
            return Ok((None, None));
        }

        // Use project name if provided, otherwise fall back to the directory name
        let connector_base_name = if let Some(name) = project_name {
            name.to_lowercase().replace(' ', "-")
        } else {
            project_path
                .file_name()
                .unwrap_or("mcp-project")
                .to_lowercase()
                .replace(' ', "-")
        };
        let connector_name = format!("mcp-{}", connector_base_name);

        // The claude_desktop_config.json file will be generated by the template system
        // with proper {{project-name}} variable substitution
        let claude_config_path = project_path.join("claude_desktop_config.json");

        println!(
            "{} Claude Desktop config will be generated with MCP server '{}'",
            Style::Success.paint("âœ“"),
            Style::Link.paint(&connector_name)
        );

        Ok((Some(claude_config_path), Some(connector_name)))
    }

    fn check_node_version() -> RoverResult<bool> {
        let output = std::process::Command::new("node").arg("--version").output();

        match output {
            Ok(output) => {
                if output.status.success() {
                    let version_str = String::from_utf8_lossy(&output.stdout);
                    let version = version_str.trim().strip_prefix('v').unwrap_or(&version_str);

                    // Parse major version
                    if let Some(major_str) = version.split('.').next()
                        && let Ok(major) = major_str.parse::<u32>()
                    {
                        return Ok(major >= 18);
                    }
                }
            }
            Err(_) => {
                println!("{} Node.js not found", Style::WarningHeading.paint("âš "));
                return Ok(false);
            }
        }

        Ok(false)
    }

    pub fn display_mcp_success_message(
        project_name: String,
        setup_result: &MCPSetupResult,
        graph_ref: &str,
        _project_path: &Utf8PathBuf,
    ) {
        println!("\n{}", Style::Success.paint("âœ“ MCP server project ready"));
        println!("\n{}: {}", Style::Heading.paint("Project"), project_name);
        println!("{}: {}", Style::Heading.paint("Graph"), graph_ref);

        println!("\n{}", Style::Heading.paint("Next steps:"));

        // Parse graph_ref to extract graph ID and variant for Studio URL
        if let Ok(parsed_graph_ref) = GraphRef::from_str(graph_ref) {
            let studio_url = format!(
                "https://studio.apollographql.com/graph/{}/variant/{}/home",
                parsed_graph_ref.name,
                parsed_graph_ref.variant
            );
            println!(
                "  {} View your graph in Studio:",
                Style::Command.paint("1.")
            );
            println!("     {}", Style::Link.paint(&studio_url));
            println!("");
        }

        println!(
            "  {} Configure API keys for your connectors:",
            Style::Command.paint("2.")
        );
        println!("     â€¢ AWS: Set up AWS credentials for Lambda/DynamoDB access");
        println!("     â€¢ Luma: Add your Luma API key to router configuration");
        println!("     â€¢ Update .apollo/router.local.yaml with your API keys");

        println!("  {} Start the MCP Server:", Style::Command.paint("3."));
        println!("     npm start");
        println!("     (Server will start on http://127.0.0.1:5000)");

        println!(
            "  {} Start local development (in another terminal):",
            Style::Command.paint("4.")
        );
        println!("     export $(cat .env | xargs)");
        println!(
            "     APOLLO_ROVER_DEV_ROUTER_VERSION=2.6.0 rover dev --supergraph-config connectors/supergraph.yaml"
        );

        println!(
            "  {} Test GraphQL with Apollo Sandbox:",
            Style::Command.paint("5.")
        );
        println!("     Open http://localhost:4000 to query your connectors");

        println!(
            "  {} Test MCP Server with Inspector:",
            Style::Command.paint("6.")
        );
        println!("     npx @modelcontextprotocol/inspector");
        println!("     - Transport: Streamable HTTP");
        println!("     - URL: http://127.0.0.1:5000/mcp");

        println!(
            "  {} (Optional) Use GraphOS Operation Collections:",
            Style::Command.paint("7.")
        );
        println!("     Instead of local .graphql files, manage operations in Studio:");
        println!("     â€¢ Create operations in Studio's Operation Collections");
        println!("     â€¢ Update .apollo/mcp.local.yaml to use 'source: collection'");
        println!("     â€¢ Learn more: https://www.apollographql.com/docs/apollo-mcp-server/define-tools#from-operation-collection");
        println!("");

        println!(
            "  {} Docker deployment (recommended for production):",
            Style::Command.paint("8.")
        );
        println!("     docker build --tag mcp-server -f mcp.Dockerfile .");
        println!("     docker build --tag mcp-router -f router.Dockerfile .");
        println!("     docker run -it --env-file .env -p5000:5000 mcp-server");
        println!("     docker run -it --env-file .env -p4000:4000 mcp-router");

        if setup_result.claude_config.is_some() {
            let default_name = "mcp-server".to_string();
            let connector_name = setup_result
                .connector_name
                .as_ref()
                .unwrap_or(&default_name);

            println!("  {} Claude Desktop setup:", Style::Command.paint("9."));
            println!("     â€¢ Install Claude Desktop from https://claude.ai/download");
            println!("     â€¢ Ensure Node.js 18+ is installed and in your PATH");
            println!("     â€¢ Copy claude_desktop_config.json to the appropriate location:");
            println!(
                "       - macOS: ~/Library/Application Support/Claude/claude_desktop_config.json"
            );
            println!("       - Windows: %APPDATA%\\Claude\\claude_desktop_config.json");
            println!("       - Linux: ~/.config/Claude/claude_desktop_config.json");
            println!(
                "     â€¢ Your MCP server will be named '{}'",
                Style::Link.paint(connector_name)
            );
            println!("     â€¢ Restart Claude Desktop to load the MCP server");
            println!(
                "     â€¢ See: https://www.apollographql.com/docs/apollo-mcp-server/quickstart#step-4-connect-claude-desktop"
            );
        }

        println!("\nðŸ’¡ Your REST APIs are now AI-accessible through natural language!");
        println!(
            "\n{} MCP project configured for local development!",
            Style::Success.paint("â„¹")
        );
        println!("   Connectors run locally only - for production, deploy as Docker containers.");
    }
}
