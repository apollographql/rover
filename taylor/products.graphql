# This schema uses Apollo Connectors, a declarative programming model for
# GraphQL that allows you to plug in your existing REST services directly into
# a graph. To learn more, visit Apollo's documentation: üîóhttps://www.apollographql.com/docs/graphos/schema-design/connectors

# Guided tutorial: üîóhttps://www.apollographql.com/docs/graphos/get-started/guides/rest


# Reference docs: üîó https://www.apollographql.com/docs/graphos/schema-design/connectors

extend schema
@link( # Enable federation
    url: "https://specs.apollo.dev/federation/v2.10"
)
@link( # Enable connectors
    url: "https://specs.apollo.dev/connect/v0.1"
    import: ["@connect", "@source"]
)

# A @source directive defines a shared data source for multiple connectors.
# ‚úèÔ∏è Replace the `name` and `baseURL` of this @source with your own REST API.
@source(
    name: "ecomm"
    http: {
        baseURL: "https://ecommerce.demo-api.apollo.dev/"
        headers: [
            # If your API requires headers, add them here and in your router.yaml file.
            { name: "name", value: "{$config.apiKey}" }
        ]
    }
)

# ‚úèÔ∏è Replace this example type with your own object type
type Product {
    id: ID!
    name: String
    description: String
}

# ‚úèÔ∏è Set up your Query field with the endpoint that returns the data you want.

type Query {
    # The Query.products field uses @connect to connect to the /products endpoint in the "ecomm" source.
    # To check out the JSON response for this endpoint, go to üîó https://ecommerce.demo-api.apollo.dev/products.
    products: [Product]
    # A @connect directive defines the API data source of a GraphQL schema field.
    @connect(
        source: "ecomm"
        http: { GET: "/products" } # GET, POST, PUT, PATCH, DELETE.
        # Use @connect for any field that should be resolved by your REST API endpoints.
        # Use the selection argument to map fields from the JSON response to the type.
        # You can do more with this selection mapping. Lean more at üîó https://www.apollographql.com/docs/graphos/schema-design/connectors/responses
        selection: """
        $.products {
        id
        name
        description
        }
        """
    )
}
