version: 2.1

# Our CircleCI dependencies
orbs:
  rust: circleci/rust@1.5.0
  gh: circleci/github-cli@1.0.4
  node: circleci/node@4.7.0

# The main workflows executed for Rover
workflows:
  lint:
    jobs:
      - xtask:
          matrix:
            parameters:
              platform: [ubuntu_gnu_docker]
              rust_channel: [stable]
              command: [lint]
  test:
    jobs:
      - xtask:
          name: unit_test_<< matrix.platform >>_<< matrix.rust_channel >>
          matrix:
            parameters:
              platform: [ubuntu_gnu_docker, ubuntu_musl, macos]
              rust_channel: [stable]
              command: [unit-test]

      - xtask:
          name: integration_test_<< matrix.platform >>_<< matrix.rust_channel >>
          matrix:
            parameters:
              platform: [ubuntu_gnu_vm]
              rust_channel: [stable]
              command: [integration-test]
          requires:
            - unit_test_ubuntu_gnu_docker_<< matrix.rust_channel >>

jobs:
  xtask:
    parameters:
      rust_channel:
        type: enum
        enum: ["stable", "nightly"]
        default: stable
      platform:
        type: executor
      command:
        type: enum
        enum: ["lint", "unit-test", "integration-test"]
    executor: << parameters.platform >>
    steps:
      - checkout
      - install_system_deps:
          platform: << parameters.platform >>
      - install_node:
          npm_version: "7.21.1"
          node_version: "14.17.1"
          platform: << parameters.platform >>
      - install_rust_toolchain:
          rust_channel: << parameters.rust_channel >>
      - exec_xtask:
          command: << parameters.command >>
          platform: << parameters.platform >>

# The machines we use to run our workflows on
executors:
  ubuntu_gnu_docker: &ubuntu_gnu_docker_executor
    docker:
      - image: cimg/base:stable
    environment:
      XTASK_TARGET: "x86_64-unknown-linux-gnu"

  # This is only used to run supergraph-demo since you can't run Docker from Docker
  ubuntu_gnu_vm: &ubuntu_gnu_vm_executor
    machine:
      image: ubuntu-1604:202104-01
    environment:
      XTASK_TARGET: "x86_64-unknown-linux-gnu"

  ubuntu_musl: &ubuntu_musl_executor
    docker:
      - image: cimg/base:stable
    environment:
      XTASK_TARGET: "x86_64-unknown-linux-musl"
  
  macos: &macos_executor
    macos:
      xcode: "11.4"
    environment:
      XTASK_TARGET: "x86_64-apple-darwin"

# reusable command snippets can be referred to in any `steps` object
commands:
  install_node:
    parameters:
      npm_version:
        type: string
      node_version:
        type: string
      platform:
        type: executor
    steps:
      - when:
          condition:
            equal: [ *ubuntu_gnu_docker_executor, << parameters.platform >> ]
          steps:
            - node/install:
                node-version: << parameters.node_version >>
                npm-version: << parameters.npm_version >>

  install_rust_toolchain:
    parameters:
      rust_channel:
        type: enum
        enum: ["stable", "nightly"]
    steps:
      - rust/install:
          version: << parameters.rust_channel >>
      - run:
          name: Install specific rust toolchain
          command: rustup target add $XTASK_TARGET

  install_system_deps:
    parameters:
      platform:
        type: executor
    steps:
      - when:
          condition:
            or:
              - equal: [ *ubuntu_gnu_docker_executor, << parameters.platform >> ]
              - equal: [ *ubuntu_gnu_vm_executor, << parameters.platform >> ]
              - equal: [ *ubuntu_musl_executor, << parameters.platform >> ]
          steps:
            - ubuntu_update_apt
            - ubuntu_install_openssl
      - when:
          condition:
            equal: [ *ubuntu_musl_executor, << parameters.platform >> ]
          steps:
            - ubuntu_install_musl_tools

  exec_xtask:
    parameters:
      command:
        type: enum
        enum: [lint, integration-test, unit-test]
      platform:
        type: executor
    steps:
      - restore_cache:
          keys:
            - rust-target-v1-<< parameters.platform >>-{{ checksum "Cargo.lock" }}
      - when:
          condition:
            # cargo xtask lint is the only xtask command that doesn't take a target
            equal: [ lint, << parameters.command >> ]
          steps:
            - run:
                command: cargo xtask << parameters.command >> --verbose
      - when:
          condition:
            not: 
              equal: [ lint, << parameters.command >> ]
          steps:
            - run:
                command: cargo xtask << parameters.command >> --target $XTASK_TARGET --verbose
      - save_cache:
          key: rust-target-v1-<< parameters.platform >>-{{ checksum "Cargo.lock" }}
          paths:
            - target/
  
  ubuntu_update_apt:
    steps:
      - run:
          name: Update apt repositories
          command: sudo apt-get update
  
  ubuntu_install_openssl:
    steps:
      - run:
          name: Install OpenSSL
          command: sudo apt-get install -y libssl-dev
  
  ubuntu_install_musl_tools:
    steps:
      - run:
          name: Install musl-tools
          command: sudo apt-get install -y musl-tools