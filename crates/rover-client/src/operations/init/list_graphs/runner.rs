use graphql_client::*;

use super::types::*;
use crate::{blocking::StudioClient, RoverClientError};

// The paths generated by graphql_client

#[derive(GraphQLQuery)]
#[graphql(
    query_path = "src/operations/init/list_graphs/list_graphs_query.graphql",
    schema_path = ".schema/schema.graphql",
    response_derives = "Eq, PartialEq, Debug, Serialize, Deserialize",
    deprecated = "warn"
)]
pub(crate) struct ListGraphsForOrganization;

pub async fn run(
    input: ListGraphsInput,
    client: &StudioClient,
) -> Result<ListGraphsResponse, RoverClientError> {
    let variables = input.into();
    let response_data = client.post::<ListGraphsForOrganization>(variables).await?;

    if let Some(organization) = response_data.organization {
        Ok(ListGraphsResponse {
            organization: OrganizationWithGraphs {
                id: organization.id,
                name: organization.name,
                graphs: organization
                    .graphs
                    .into_iter()
                    .map(|g| GraphInfo {
                        id: g.id,
                        name: g.name,
                        variants: g
                            .variants
                            .into_iter()
                            .map(|v| VariantInfo { name: v.name })
                            .collect(),
                    })
                    .collect(),
            },
        })
    } else {
        Err(RoverClientError::GraphQl {
            msg: "Organization not found".to_string(),
        })
    }
}
